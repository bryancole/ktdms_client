from SOAPpy import WSDL
import wx
import threading
import Queue
import urllib
import subprocess
import tempfile
import os

def check(val):
    #print "status", val.status_code, val.message
    pass

def async(func):
    def newfunc(self, *args, **kwds):
        try:
            callback = kwds.pop('callback')
            def newcb(ret):
                wx.CallAfter(callback, ret)
        except KeyError:
            newcb=None
        self.queue.put((func, args, kwds, newcb), block=False)
    return newfunc


def sync(func):
    def newfunc(self, *args, **kwds):
        container = []
        evt = threading.Event()
        def callback(ret):
            container.append(ret)
            evt.set()
        self.queue.put((func, args, kwds, callback), block=False)
        evt.wait(60)
        try:
            return container[0]
        except IndexError:
            raise Exception("async call timeout")
    return newfunc
        

class Struct(object):
    def __init__(self, **kwds):
        for k in kwds:
            setattr(self, k, kwds[k])

class DMSSession(object):
    serverName = "http://mercury:8080"
    wsdlFile = "/ktwebservice/webservice.php?wsdl"
    def __init__(self, user, passwd):
        self.queue = Queue.Queue()
        self.username = user
        self.passwd = passwd
        
        self.workerThread = threading.Thread(target=self.Worker)
        self.workerThread.setDaemon(True)
        self.workerThread.start()
        
    def Worker(self):
        self.server = WSDL.Proxy(self.serverName + self.wsdlFile)
        self.login(self.username, self.passwd)
        while True:
            func, args, kwds, callback = self.queue.get(block=True)
            ret = func(self, *args, **kwds)
            if callback is not None:
                callback(ret) 
        
    def login(self, user, passwd):
        ret = self.server.login(str(user),str(passwd),'')
        check(ret)
        self._id = ret.message
        
    def logout(self):
        ret = self.server.logout(self._id)
        check(ret)
        
    def getFolderDetails(self, folderId):
        pass
    
    @sync
    def downloadDoc(self, docId):
        ret = self.server.download_document(self._id, docId)
        assert ret.status_code==0
        return ret.message
        
    @async
    def getFolderContents(self, folderId):
        ret = self.server.get_folder_contents(self._id, int(folderId),1,'DF')
        check(ret)
        if ret.status_code==22: #permissions error
            return []
        if ret.items is None:
            return []
        return ret.items #[folderItem(a) for a in ret.items]
        
class NodePopup(wx.Menu):
    def __init__(self, frame, treeid, node):
        self.frame = frame
        self.treeid = treeid
        self.node = node
        wx.Menu.__init__(self)
        id = self.Append(wx.NewId(), "Properties")
        self.Bind(wx.EVT_MENU, self.OnProperties, id)
        
    def OnProperties(self, event):
        dlg = PropertiesDialog(self.frame, self.node)
        dlg.ShowModal()
        
        
class FolderPopup(NodePopup):
    def __init__(self, frame, treeid, node):
        super(self.__class__, self).__init__(frame, treeid, node)
        self.Append(wx.NewId(), "Refresh")
        self.Append(wx.NewId(), "Add Document")
        self.Append(wx.NewId(), "Add Folder")
        self.Append(wx.NewId(), "Rename")
        self.Append(wx.NewId(), "Delete")
    
        
class DocumentPopup(NodePopup):
    _openFiles=[]
    def __init__(self, frame, treeid, node):
        super(self.__class__, self).__init__(frame, treeid, node)
        id = self.Append(wx.NewId(), "Open")
        self.Bind(wx.EVT_MENU, self.OnOpen, id)
        
        id = self.Append(wx.NewId(), "Download")
        self.Bind(wx.EVT_MENU, self.OnDownload, id)
        
        self.Append(wx.NewId(), "Check Out")
        item = self.Append(wx.NewId(), "Check In")
        item.Enable(False)
        self.Append(wx.NewId(), "Copy")
        self.Append(wx.NewId(), "Rename")
        self.Append(wx.NewId(), "Delete")
        
    def OnDownload(self, event):
        msg, filename = self.node.DownloadDoc(self.frame.session)
        fname = wx.FileSelector("Save to file...", 
                                default_filename=filename,
                                flags=wx.SAVE)
        if fname:
            url = self.frame.session.serverName + msg
            urllib.urlretrieve(url, fname)
            
    def OnOpen(self, event):
        msg, filename = self.node.DownloadDoc(self.frame.session)
        ext = os.path.splitext(filename)[1]
        fobj = tempfile.NamedTemporaryFile(suffix=ext)
        url = self.frame.session.serverName + msg
        urllib.urlretrieve(url, fobj.name)
        subprocess.Popen(["gnome-open",fobj.name])
        print "launched program", fobj.name
        self._openFiles.append(fobj)
        
class PropertiesDialog(wx.Dialog):
    hide = ['treeid','mime_display','storage_path',
            'items','item_type','mime_icon_path']
    def __init__(self, parent, node):
        wx.Dialog.__init__(self, parent,-1,"Properties...")
        sizer = wx.BoxSizer(wx.VERTICAL)
        keys = (k for k in node.__dict__ if not k.startswith('_'))
        keys = (k for k in keys if k not in self.hide)
        for k in keys:
            val = getattr(node, k)
            text = "%s : %s"%(k, str(val))
            label = wx.StaticText(self, -1, text)
            sizer.Add(label, 0, wx.ALL, 5)
        self.SetSizer(sizer)
        self.Fit()
        
        self.Bind(wx.EVT_CLOSE, self.OnClose)
    
    def OnClose(self, event):
        self.Destroy()
        
class ModelNode(object):
    def __init__(self, soapItems):
        d = soapItems.__dict__
        items = (k for k in d if not k.startswith('_'))
        for k in items:
            setattr(self, k, d[k])
            
    def GetPopupMenu(self, frame, treeid, node):
        return self._popup(frame, treeid, node)
        
class Folder(ModelNode):    
    _popup = FolderPopup
    def GetChildren(self, session, callback):
        session.getFolderContents(self.id, callback=callback)

    
class Document(ModelNode):
    _popup = DocumentPopup
    def DownloadDoc(self, session):
        ret = session.downloadDoc(self.id)
        return ret, self.filename

        
class TreeFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, -1, "DMS View")
        
        mb = wx.MenuBar()
        bookmarks = wx.Menu()
        
        mb.Append(bookmarks, "Bookmarks")
        self.SetMenuBar(mb)
        
        isz = (16,16)
        il = wx.ImageList(isz[0], isz[1])
        self.fldridx     = il.Add(wx.ArtProvider_GetBitmap(wx.ART_FOLDER,      wx.ART_OTHER, isz))
        self.fldropenidx = il.Add(wx.ArtProvider_GetBitmap(wx.ART_FILE_OPEN,   wx.ART_OTHER, isz))
        self.fileidx     = il.Add(wx.ArtProvider_GetBitmap(wx.ART_NORMAL_FILE, wx.ART_OTHER, isz))
        
        self.session = DMSSession('bryan.cole','clique')
        
        style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT 
        self.tree = wx.TreeCtrl(self, -1, style=style)
        self.tree.AssignImageList(il)
        rootFolder = Folder(Struct(id=1))
        rootid = self.tree.AddRoot("folders", data=wx.TreeItemData(rootFolder), image=self.fldridx)
        rootFolder.treeid = rootid
        self.tree.SetItemHasChildren(rootid)
        
        self.tree.Bind(wx.EVT_TREE_ITEM_EXPANDED, self.OnExpandItem)
        self.tree.Bind(wx.EVT_TREE_ITEM_RIGHT_CLICK, self.OnRClick)
        
    def IterChildren(self, treeid):
        child = self.tree.GetFirstChild(treeid)
        while child[0].IsOk():
            yield child[0]
            child = self.tree.GetNextChild(treeid, child[1])
            
    def makeSyncCallback(self, treeid, childNodes):
        currentMap = dict((child.id, child) for child in childNodes)
        currentIds = set(currentMap)
        def callback(itemList):
            serverMap = dict((item.id, item) for item in itemList)
            serverIds = set(serverMap)
            for id in serverIds.difference(currentIds):
                item = serverMap[id]
                if item.item_type == 'F':
                    node = Folder(item)
                    img = self.fldridx
                else:
                    img = self.fileidx
                    node = Document(item)
                newid = self.tree.AppendItem(treeid, item.filename, 
                                        data=wx.TreeItemData(node), image=img)
                node.treeid = newid
                if item.item_type == 'F':
                    self.tree.SetItemHasChildren(newid, True)
            for id in currentIds.difference(serverIds):
                node = currentMap[id]
                self.tree.Delete(node.treeid)
            
        return callback
        
    def OnExpandItem(self, event):
        treeid = event.GetItem()
        folder = self.tree.GetItemData(treeid).GetData()
        children = [self.tree.GetItemData(id).GetData() for id in self.IterChildren(treeid)]
        callback = self.makeSyncCallback(treeid, children)
        folder.GetChildren(self.session, callback)
        
    def OnRClick(self, event):
        treeid = event.GetItem()
        node = self.tree.GetItemData(treeid).GetData()
        menu = node.GetPopupMenu(self, treeid, node)
        self.tree.PopupMenu(menu, event.GetPoint())

if __name__=="__main__":
    app = wx.App(0)
    frame = TreeFrame()
    frame.Show()
    app.MainLoop()
    